// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  password     String
  cpf          String
  email        String        @unique
  wallet       Float?        @default(0.0)
  address      Address[]
  transactions Transaction[]
  indications  Indication[]

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  Order      Order[]

  @@map("users")
}

model Address {
  id           String  @id @default(uuid())
  postal_code  String
  address      String
  neighborhood String
  city         String
  state        String
  complement   String?

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@map("addresses")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       Float
  description String
  image       String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  @@map("products")
}

model Indication {
  id              String   @id @default(uuid())
  indicator_id    String
  indicated_email String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  indicator User @relation(fields: [indicator_id], references: [id])

  @@map("indications")
}

model Transaction {
  id        String    @id @default(uuid())
  user_id   String
  value     Float
  type      String
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [user_id], references: [id])

  @@map("transitions")
}

model Order {
  id        String    @id @default(uuid())
  user_id   String
  total     Float
  status    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [user_id], references: [id])
}
